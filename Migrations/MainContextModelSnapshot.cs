// <auto-generated />
using Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace webshop_backend.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<int>("Number");

                    b.Property<string>("Street");

                    b.Property<int>("UserId");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Models.ColorIdentity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("colorId");

                    b.Property<string>("productId");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("ColorIdentity");
                });

            modelBuilder.Entity("Models.ColorIndicator", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("colorId");

                    b.Property<string>("productId");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("ColocolorIndicator");
                });

            modelBuilder.Entity("Models.Colors", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("colorId");

                    b.Property<string>("productId");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Models.ImagesUrl", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("art_crop");

                    b.Property<string>("border_crop");

                    b.Property<string>("large");

                    b.Property<string>("normal");

                    b.Property<string>("png");

                    b.Property<string>("productId");

                    b.Property<string>("small");

                    b.HasKey("id");

                    b.HasIndex("productId")
                        .IsUnique();

                    b.ToTable("ImagesUrl");
                });

            modelBuilder.Entity("Models.Legalitie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("brawl");

                    b.Property<string>("commander");

                    b.Property<string>("duel");

                    b.Property<string>("frontier");

                    b.Property<string>("future");

                    b.Property<string>("legacy");

                    b.Property<string>("modern");

                    b.Property<string>("one_v_one");

                    b.Property<string>("pauper");

                    b.Property<string>("penny");

                    b.Property<string>("productId");

                    b.Property<string>("standard");

                    b.Property<string>("vintage");

                    b.HasKey("id");

                    b.HasIndex("productId")
                        .IsUnique();

                    b.ToTable("Legalitie");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("addressId");

                    b.Property<string>("status");

                    b.Property<int>("userId");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Models.OrderProduct", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("orderId");

                    b.Property<double>("price");

                    b.Property<int>("productId");

                    b.Property<int>("quantity");

                    b.HasKey("id");

                    b.HasIndex("orderId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("Models.Parts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("partOneId");

                    b.Property<string>("partTwoId");

                    b.HasKey("id");

                    b.HasIndex("partOneId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("foil");

                    b.Property<string>("lang");

                    b.Property<string>("loyalty");

                    b.Property<string>("mana_cost");

                    b.Property<string>("name");

                    b.Property<bool>("nonfoil");

                    b.Property<string>("oracle_id");

                    b.Property<string>("oracle_text");

                    b.Property<string>("power");

                    b.Property<string>("price");

                    b.Property<string>("rarity");

                    b.Property<string>("reserved");

                    b.Property<string>("set");

                    b.Property<string>("setName");

                    b.Property<string>("toughness");

                    b.Property<string>("type_line");

                    b.HasKey("id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("approach");

                    b.Property<string>("email");

                    b.Property<string>("name");

                    b.Property<string>("password");

                    b.Property<string>("role");

                    b.Property<string>("salt");

                    b.Property<string>("token");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.HasOne("Models.User")
                        .WithMany("addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ColorIdentity", b =>
                {
                    b.HasOne("Models.Product")
                        .WithMany("color_identity")
                        .HasForeignKey("productId");
                });

            modelBuilder.Entity("Models.ColorIndicator", b =>
                {
                    b.HasOne("Models.Product")
                        .WithMany("color_indicator")
                        .HasForeignKey("productId");
                });

            modelBuilder.Entity("Models.Colors", b =>
                {
                    b.HasOne("Models.Product")
                        .WithMany("colors")
                        .HasForeignKey("productId");
                });

            modelBuilder.Entity("Models.ImagesUrl", b =>
                {
                    b.HasOne("Models.Product")
                        .WithOne("image_uris")
                        .HasForeignKey("Models.ImagesUrl", "productId");
                });

            modelBuilder.Entity("Models.Legalitie", b =>
                {
                    b.HasOne("Models.Product")
                        .WithOne("legalities")
                        .HasForeignKey("Models.Legalitie", "productId");
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.User")
                        .WithMany("orders")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.OrderProduct", b =>
                {
                    b.HasOne("Models.Order")
                        .WithMany("orderProducts")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Parts", b =>
                {
                    b.HasOne("Models.Product", "partOne")
                        .WithMany("all_parts")
                        .HasForeignKey("partOneId");
                });
#pragma warning restore 612, 618
        }
    }
}
